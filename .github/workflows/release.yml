name: Release Packages

on:
    push:
        branches:
            - main
        paths-ignore:
            - README.md
            - '**/*.md'
            - LICENSE

jobs:
    analyze-commit:
        if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
        runs-on: ubuntu-latest
        outputs:
            package: ${{ steps.get-package.outputs.package }}
            type: ${{ steps.get-type.outputs.type }}
            version_type: ${{ steps.get-version-type.outputs.version_type }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Get package and type from commit
              id: get-package
              run: |
                  COMMIT_MSG=$(git log -1 --pretty=%B)
                  if [[ $COMMIT_MSG =~ ^feat:|^fix:|^chore: ]]; then
                    echo "package=all" >> $GITHUB_OUTPUT
                  elif [[ $COMMIT_MSG =~ ^$$([^]]+)$$|^([^-]+)- ]]; then
                    PACKAGE="${BASH_REMATCH[1]}${BASH_REMATCH[2]}"
                    echo "package=${PACKAGE}" >> $GITHUB_OUTPUT
                  fi

            - name: Get commit type
              id: get-type
              run: |
                  COMMIT_MSG=$(git log -1 --pretty=%B)
                  if [[ $COMMIT_MSG =~ ^feat:|^$$.*$$-feat:|^.*-feat: ]]; then
                    echo "type=feat" >> $GITHUB_OUTPUT
                  elif [[ $COMMIT_MSG =~ ^fix:|^$$.*$$-fix:|^.*-fix: ]]; then
                    echo "type=fix" >> $GITHUB_OUTPUT
                  elif [[ $COMMIT_MSG =~ ^chore:|^$$.*$$-chore:|^.*-chore: ]]; then
                    echo "type=chore" >> $GITHUB_OUTPUT
                  else
                    echo "type=fix" >> $GITHUB_OUTPUT
                  fi

            - name: Determine version type
              id: get-version-type
              run: |
                  if [[ "${{ steps.get-type.outputs.type }}" == "feat" ]]; then
                    echo "version_type=minor" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.get-type.outputs.type }}" == "fix" ]]; then
                    echo "version_type=patch" >> $GITHUB_OUTPUT
                  elif [[ "${{ steps.get-type.outputs.type }}" == "chore" ]]; then
                    echo "version_type=major" >> $GITHUB_OUTPUT
                  fi

    release-package:
        needs: analyze-commit
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  registry-url: 'https://registry.npmjs.org'

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest

            - name: Install dependencies
              run: pnpm install --no-frozen-lockfile

            - name: Configure Git
              run: |
                  git config --global user.name 'GitHub Actions Bot'
                  git config --global user.email 'actions@github.com'

            - name: Release specific package
              if: needs.analyze-commit.outputs.package != 'all'
              run: |
                  PACKAGE=${{ needs.analyze-commit.outputs.package }}
                  VERSION_TYPE=${{ needs.analyze-commit.outputs.version_type }}

                  # 如果是 tools 包，需要先更新依赖包版本
                  if [ "$PACKAGE" = "tools" ]; then
                    echo "Updating dependencies versions..."
                    
                    # 更新 shared 包版本
                    cd packages/shared
                    pnpm version $VERSION_TYPE --no-git-tag-version
                    cd ../..
                    
                    # 更新 fetch 包版本
                    cd packages/fetch
                    pnpm version $VERSION_TYPE --no-git-tag-version
                    cd ../..
                  fi

                  # 更新当前包版本
                  cd packages/$PACKAGE
                  pnpm version $VERSION_TYPE --no-git-tag-version
                  cd ../..

                  # 提交更改
                  git add .
                  git commit -m "chore(release): update $PACKAGE package version [skip ci]"
                  git push origin main

                  # 如果是 tools 包，需要先构建并发布依赖
                  if [ "$PACKAGE" = "tools" ]; then
                    echo "Building and publishing dependencies..."
                    
                    # 构建并发布 shared 包
                    pnpm run build:shared
                    cd packages/shared
                    pnpm publish --access public --no-git-checks
                    cd ../..
                    
                    # 构建并发布 fetch 包
                    pnpm run build:fetch
                    cd packages/fetch
                    pnpm publish --access public --no-git-checks
                    cd ../..
                  fi

                  # 构建当前包
                  pnpm run build:$PACKAGE

                  # 发布当前包
                  cd packages/$PACKAGE
                  pnpm publish --access public --no-git-checks
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}

            - name: Release all packages
              if: needs.analyze-commit.outputs.package == 'all'
              run: |
                  VERSION_TYPE=${{ needs.analyze-commit.outputs.version_type }}

                  # 创建临时分支
                  git checkout -b temp-release-branch

                  # 更新所有包的版本
                  for dir in packages/*; do
                    if [ -d "$dir" ]; then
                      cd "$dir"
                      pnpm version $VERSION_TYPE --no-git-tag-version
                      cd ../..
                    fi
                  done

                  # 提交更改
                  git add .
                  git commit -m "chore(release): update all packages versions [skip ci]"

                  # 获取最新的更改并rebase
                  git fetch origin main
                  git rebase origin/main

                  # 推送更改到主分支
                  git push origin temp-release-branch:main

                  # 按依赖顺序构建并发布包
                  pnpm run build

                  # 发布所有包
                  pnpm -r publish --access public --no-git-checks

              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}
